#include <stddef.h>
#include <stdlib.h> 
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_NAME 256

struct proc{
char name[MAX_NAME];
int priorty; 
int pid; 
int runtime; 
};
struct node{
struct proc process;
struct node* next;
};
struct queue {
struct node* front;
struct node* back;
};

void q(struct queue* queue){
queue->front = queue-> back = NULL;
}
int empty(struct queue* queue){
return (queue->front == NULL);
}

void print_process(struct proc process){
printf("name: %s, priority: %d, pid: %d, runtime: %d\n", process.name, process.priorty, process.pid, process.runtime);
}
void delete_process(struct queue* queue, char* n, int pid){
struct node* current = queue->front;
struct node* prev = NULL;
while (current != NULL){
if (((pid && current->process.pid == atoi(n))) || ((!pid && strcmp (current->process.name, n) == 0))){

if (!prev){
queue->front = current->next;
}
else{
} if(!current->next) { 
queue->back = prev;
}
free(current);
return;
}
prev = current;
current = current->next;
}
}


int main(){

	FILE* file = fopen("processes.txt", "r");
	if (file == NULL){
		printf("failed to open\n");
		return 1;
	}
struct queue queue;
q(&queue);
	
struct proc process;
while (fscanf(file, "%[^,],%d,%d,%d\n", process.name, &process.priorty, &process.pid, &process.runtime) == 4){
	struct node* newlink = (struct node*)malloc(sizeof(struct node));
	if(!newlink){
	printf("malloc failed");
	exit(EXIT_FAILURE);
}
newlink->process = process;
newlink->next = NULL;
if (empty(&queue)){
queue.front = queue.back = newlink;
}
else{
queue.back->next = newlink;
queue.back = newlink;
}
}
fclose(file);

delete_process(&queue, "emacs", 0);
delete_process(&queue, "12235", 1);

printf("remaining processes in the queue: ");
struct node* current = queue.front;
while (current != NULL){
print_process(current->process);
current= current->next;
}

return 0;
}


